{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["style","h1","flex","flexDirection","h2","margin","h3","marginTop","padding","last","marginBottom","filled","width","PredictionResponse","message","positive","Message","size","negative","Header","App","useState","response","setResponse","submitted","setSubmitted","Fragment","Segment","Container","Image","src","floated","href","target","as","content","Button","labelPosition","icon","Icon","name","Label","basic","initialValues","diagnosis_age","sex","treatment","idh_status","mgmt_status","chemo","tumor_side","tumor_location","radiotherapy","sx_main","validate","values","errors","test","onSubmit","setSubmitting","obj","Sex","Age","parseInt","Biopsy","IcRET","CRET","Tside","IDHStatus","MGMT","SxDeficit","SxHeadache","SxSeizure","ZeroGy","ThirtyGy","FortyGy","SixtyGy","TMZ","axios","post","then","data","catch","err","alert","JSON","stringify","finally","touched","handleChange","handleBlur","handleSubmit","isSubmitting","Grid","container","columns","stackable","Column","Group","type","onClick","value","active","Or","Input","onChange","onBlur","error","label","placeholder","textAlign","vertical","fluid","primary","disabled","Object","keys","length","loading","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.70918e08.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Button,\n  Grid,\n  Header,\n  Segment,\n  Message,\n  Input,\n  Image,\n  Icon,\n  Container,\n  Label,\n} from \"semantic-ui-react\";\nimport { Formik } from \"formik\";\nimport axios from \"axios\";\n\nconst style = {\n  h1: {\n    // marginTop: \"3em\",\n  },\n  flex: {\n    flex: 1,\n    flexDirection: \"row\",\n  },\n  h2: {\n    margin: \"4em 0em 2em\",\n  },\n  h3: {\n    marginTop: \"2em\",\n    padding: \"2em 0em\",\n  },\n  last: {\n    marginBottom: \"300px\",\n  },\n  filled: {\n    width: \"100%\",\n  },\n};\n\nconst PredictionResponse = ({ message, positive }) => {\n  return (\n    <Message size=\"huge\" positive={positive} negative={!positive}>\n      <Message.Header>{message}</Message.Header>\n    </Message>\n  );\n};\n\nconst App = () => {\n  const [response, setResponse] = useState({});\n  const [submitted, setSubmitted] = useState(false);\n  return (\n    <React.Fragment>\n      <Segment>\n        <Container>\n          <Image\n            src=\"/cam_neuro.png\"\n            size=\"small\"\n            floated=\"left\"\n            href=\"https://www.neurosurg.cam.ac.uk/research-groups/brain-tumour-imaging-lab/\"\n            target=\"_blank\"\n          />\n          <Header\n            as=\"h1\"\n            content=\"GBM Patient Survival Predictor\"\n            style={style.h1}\n          />\n          <Button as=\"div\" labelPosition=\"right\">\n            <Button icon href=\"https://github.com/AliLawrence/ML_GBMSurvival\">\n              <Icon name=\"github\" />\n            </Button>\n            <Label\n              as=\"a\"\n              basic\n              href=\"https://github.com/AliLawrence/ML_GBMSurvival\"\n            >\n              Source Code\n            </Label>\n          </Button>\n        </Container>\n      </Segment>\n      <Formik\n        initialValues={{\n          diagnosis_age: \"\",\n          sex: \"male\",\n          treatment: \"gross_total_resection\",\n          idh_status: \"0\",\n          mgmt_status: \"0\",\n          chemo: \"0\",\n          tumor_side: \"left\",\n          tumor_location: \"corpus_callosum\",\n          radiotherapy: \"0\",\n          sx_main: \"deficit\",\n        }}\n        validate={(values) => {\n          const errors = {};\n          if (!values.diagnosis_age) {\n            errors.diagnosis_age = \"Required\";\n          } else if (!/^[0-9]+$/i.test(values.diagnosis_age)) {\n            errors.diagnosis_age = \"Age not a number\";\n          }\n          return errors;\n        }}\n        onSubmit={(values, { setSubmitting }) => {\n          const obj = {\n            Sex: values.sex === \"female\" ? 1 : 0,\n            Age: parseInt(values.diagnosis_age) < 69 ? 1 : 0,\n            Biopsy: values.treatment === \"biopsy\" ? 1 : 0,\n            IcRET: values.treatment === \"subtotal_resection\" ? 1 : 0,\n            CRET: values.treatment === \"gross_total_resection\" ? 1 : 0,\n            Tside: values.tumor_side === \"left\" ? 0 : 1, // check\n            IDHStatus: values.idh_status === \"1\" ? 1 : 0,\n            MGMT: values.mgmt_status === \"1\" ? 1 : 0,\n            SxDeficit: values.sx_main === \"deficit\" ? 1 : 0,\n            SxHeadache: values.sx_main === \"headache\" ? 1 : 0,\n            SxSeizure: values.sx_main === \"seizure\" ? 1 : 0,\n            ZeroGy: values.radiotherapy === \"0\" ? 1 : 0,\n            ThirtyGy: values.radiotherapy === \"30\" ? 1 : 0,\n            FortyGy: values.radiotherapy === \"40\" ? 1 : 0,\n            SixtyGy: values.radiotherapy === \"60\" ? 1 : 0,\n            TMZ: values.chemo === \"1\" ? 1 : 0,\n          };\n\n          axios\n            .post(\"/predict\", obj)\n            .then(({ data }) => {\n              setResponse(data);\n            })\n            .catch((err) => alert(JSON.stringify(err)))\n            .finally(() => {\n              setSubmitting(false);\n              setSubmitted(true);\n            });\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <Grid container columns={2} stackable>\n              <Grid.Column>\n                <Segment>\n                  <Button.Group style={style.filled}>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"sex\"\n                      value=\"male\"\n                      active={values.sex === \"male\"}\n                    >\n                      Male\n                    </Button>\n                    <Button.Or />\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"sex\"\n                      value=\"female\"\n                      active={values.sex === \"female\"}\n                    >\n                      Female\n                    </Button>\n                  </Button.Group>\n                </Segment>\n              </Grid.Column>\n              <Grid.Column>\n                <Segment>\n                  <Input\n                    style={style.filled}\n                    name=\"diagnosis_age\"\n                    value={values.diagnosis_age}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    error={errors.diagnosis_age && touched.diagnosis_age}\n                    label={{ basic: true, content: \"years old\" }}\n                    labelPosition=\"right\"\n                    placeholder=\"Enter age at diagnosis...\"\n                  />\n                  <br />\n                  {errors.diagnosis_age &&\n                    touched.diagnosis_age &&\n                    errors.diagnosis_age}\n                </Segment>\n              </Grid.Column>\n              <Grid.Column>\n                <Segment>\n                  <Header\n                    as=\"h3\"\n                    content=\"Main symptom on presentation\"\n                    textAlign=\"center\"\n                  />\n                  <Button.Group style={style.filled}>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"sx_main\"\n                      value=\"deficit\"\n                      active={values.sx_main === \"deficit\"}\n                    >\n                      Neurological deficit\n                    </Button>\n                    <Button.Or />\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"sx_main\"\n                      value=\"headache\"\n                      active={values.sx_main === \"headache\"}\n                    >\n                      Headache\n                    </Button>\n                    <Button.Or />\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"sx_main\"\n                      value=\"seizure\"\n                      active={values.sx_main === \"seizure\"}\n                    >\n                      Seizure\n                    </Button>\n                  </Button.Group>\n                </Segment>\n              </Grid.Column>\n              <Grid.Column>\n                <Segment>\n                  <Header\n                    as=\"h3\"\n                    content=\"Tumor hemisphere\"\n                    textAlign=\"center\"\n                  />\n                  <Button.Group style={style.filled}>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_side\"\n                      value=\"left\"\n                      active={values.tumor_side === \"left\"}\n                    >\n                      Left\n                    </Button>\n                    <Button.Or />\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_side\"\n                      value=\"right\"\n                      active={values.tumor_side === \"right\"}\n                    >\n                      Right\n                    </Button>\n                    <Button.Or />\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_side\"\n                      value=\"both\"\n                      active={values.tumor_side === \"both\"}\n                    >\n                      Both\n                    </Button>\n                  </Button.Group>\n                </Segment>\n              </Grid.Column>\n              <Grid.Column>\n                <Segment>\n                  <Header\n                    as=\"h3\"\n                    content=\"Surgical management\"\n                    textAlign=\"center\"\n                  />\n                  <Button.Group vertical style={style.filled}>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"treatment\"\n                      value=\"gross_total_resection\"\n                      active={values.treatment === \"gross_total_resection\"}\n                    >\n                      Complete Resection of Enhancing Tumor (CRET)\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"treatment\"\n                      value=\"subtotal_resection\"\n                      active={values.treatment === \"subtotal_resection\"}\n                    >\n                      Incomplete Resection of Enhancing Tumor (IcRET)\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"treatment\"\n                      value=\"biopsy\"\n                      active={values.treatment === \"biopsy\"}\n                    >\n                      Biopsy\n                    </Button>\n                  </Button.Group>\n                </Segment>\n              </Grid.Column>\n              {/* <Grid.Column>\n                <Segment>\n                  <Header as=\"h3\" content=\"Tumor location\" textAlign=\"center\" />\n                  <Button.Group vertical style={style.filled}>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_location\"\n                      value=\"corpus_callosum\"\n                      active={values.tumor_location === \"corpus_callosum\"}\n                    >\n                      Corpus Callosum\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_location\"\n                      value=\"exterenal_capsule\"\n                      active={values.tumor_location === \"exterenal_capsule\"}\n                    >\n                      External Capsule\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_location\"\n                      value=\"frontal_lobe\"\n                      active={values.tumor_location === \"frontal_lobe\"}\n                    >\n                      Frontal Lobe\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_location\"\n                      value=\"parietal_lobe\"\n                      active={values.tumor_location === \"parietal_lobe\"}\n                    >\n                      Parietal Lobe\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_location\"\n                      value=\"temporal_lobe\"\n                      active={values.tumor_location === \"temporal_lobe\"}\n                    >\n                      Temporal Lobe\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_location\"\n                      value=\"occipital_lobe\"\n                      active={values.tumor_location === \"occipital_lobe\"}\n                    >\n                      Occipital Lobe\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_location\"\n                      value=\"thalamus\"\n                      active={values.tumor_location === \"thalamus\"}\n                    >\n                      Thalamus\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_location\"\n                      value=\"cerebellum\"\n                      active={values.tumor_location === \"cerebellum\"}\n                    >\n                      Cerebellum\n                    </Button>\n                  </Button.Group>\n                </Segment>\n              </Grid.Column> */}\n              <Grid.Column>\n                <Segment>\n                  <Header\n                    as=\"h3\"\n                    content=\"MGMT status >10%\"\n                    textAlign=\"center\"\n                  />\n                  <Button.Group style={style.filled}>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"mgmt_status\"\n                      value=\"0\"\n                      active={values.mgmt_status === \"0\"}\n                    >\n                      Negative\n                    </Button>\n                    <Button.Or />\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"mgmt_status\"\n                      value=\"1\"\n                      active={values.mgmt_status === \"1\"}\n                    >\n                      Positive\n                    </Button>\n                  </Button.Group>\n                </Segment>\n              </Grid.Column>\n              <Grid.Column>\n                <Segment>\n                  <Header\n                    as=\"h3\"\n                    content=\"Radiotherapy treatment\"\n                    textAlign=\"center\"\n                  />\n                  <Button.Group style={style.filled}>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"radiotherapy\"\n                      value=\"0\"\n                      active={values.radiotherapy === \"0\"}\n                    >\n                      None given\n                    </Button>\n                    <Button.Or />\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"radiotherapy\"\n                      value=\"30\"\n                      active={values.radiotherapy === \"30\"}\n                    >\n                      30gy\n                    </Button>\n                    <Button.Or />\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"radiotherapy\"\n                      value=\"40\"\n                      active={values.radiotherapy === \"40\"}\n                    >\n                      40gy\n                    </Button>\n                    <Button.Or />\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"radiotherapy\"\n                      value=\"60\"\n                      active={values.radiotherapy === \"60\"}\n                    >\n                      60gy\n                    </Button>\n                  </Button.Group>\n                </Segment>\n              </Grid.Column>\n              <Grid.Column>\n                <Segment>\n                  <Header as=\"h3\" content=\"IDH status\" textAlign=\"center\" />\n                  <Button.Group style={style.filled}>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"idh_status\"\n                      value=\"0\"\n                      active={values.idh_status === \"0\"}\n                    >\n                      Negative\n                    </Button>\n                    <Button.Or />\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"idh_status\"\n                      value=\"1\"\n                      active={values.idh_status === \"1\"}\n                    >\n                      Positive\n                    </Button>\n                  </Button.Group>\n                </Segment>\n              </Grid.Column>\n              <Grid.Column>\n                <Segment>\n                  <Header\n                    as=\"h3\"\n                    content=\"TMZ Chemotherapy\"\n                    textAlign=\"center\"\n                  />\n                  <Button.Group style={style.filled}>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"chemo\"\n                      value=\"0\"\n                      active={values.chemo === \"0\"}\n                    >\n                      Not given\n                    </Button>\n                    <Button.Or />\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"chemo\"\n                      value=\"1\"\n                      active={values.chemo === \"1\"}\n                    >\n                      Given\n                    </Button>\n                  </Button.Group>\n                </Segment>\n              </Grid.Column>\n            </Grid>\n            <Segment>\n              <Button\n                fluid\n                primary\n                disabled={\n                  Object.keys(errors).length > 0 || values.diagnosis_age === \"\"\n                }\n                loading={isSubmitting}\n                type=\"submit\"\n              >\n                Submit\n              </Button>\n            </Segment>\n            <br />\n            {/* <pre>{JSON.stringify(values, null, 2)}</pre> */}\n          </form>\n        )}\n      </Formik>\n      {submitted && (\n        <PredictionResponse\n          message={response.message}\n          positive={response.positive}\n        />\n      )}\n      <br />\n      <br />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}