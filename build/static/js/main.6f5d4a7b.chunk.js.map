{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["style","h1","marginTop","h2","margin","h3","padding","last","marginBottom","filled","width","PredictionResponse","message","positive","Message","size","negative","Header","setInt","key","data","parseInt","setDummy","App","useState","response","setResponse","submitted","setSubmitted","Fragment","as","content","textAlign","initialValues","diagnosis_age","sex","treatment","idh_status","sx_duration","chemo","tumor_side","tumor_location","radiotherapy","sx_main","validate","values","errors","test","onSubmit","setSubmitting","tmp","axios","post","then","catch","err","alert","JSON","stringify","finally","touched","handleChange","handleBlur","handleSubmit","isSubmitting","Grid","container","columns","stackable","Column","Segment","Button","Group","type","onClick","name","value","active","Or","Input","onChange","onBlur","error","label","basic","labelPosition","placeholder","vertical","fluid","primary","disabled","Object","keys","length","loading","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.6f5d4a7b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Button,\n  Grid,\n  Header,\n  Segment,\n  Message,\n  Input,\n} from 'semantic-ui-react';\nimport { Formik } from 'formik';\nimport axios from 'axios';\n\nconst style = {\n  h1: {\n    marginTop: '3em',\n  },\n  h2: {\n    margin: '4em 0em 2em',\n  },\n  h3: {\n    marginTop: '2em',\n    padding: '2em 0em',\n  },\n  last: {\n    marginBottom: '300px',\n  },\n  filled: {\n    width: '100%',\n  },\n};\n\nconst PredictionResponse = ({ message, positive }) => {\n  return (\n    <Message size=\"huge\" positive={positive} negative={!positive}>\n      <Message.Header>{message}</Message.Header>\n    </Message>\n  );\n};\n\nconst setInt = (key, data) => {\n  data[key] = parseInt(data[key]);\n};\nconst setDummy = (key, data) => {\n  data[`${key}_${data[key]}`] = 1;\n  delete data[key];\n};\n\nconst App = () => {\n  const [response, setResponse] = useState({});\n  const [submitted, setSubmitted] = useState(false);\n  return (\n    <React.Fragment>\n      <Header\n        as=\"h1\"\n        content=\"GBM Patient Survival Predictor\"\n        style={style.h1}\n        textAlign=\"center\"\n      />\n      <Formik\n        initialValues={{\n          diagnosis_age: '',\n          sex: 'male',\n          treatment: 'biopsy',\n          idh_status: '0',\n          sx_duration: '',\n          chemo: '0',\n          tumor_side: 'left',\n          tumor_location: 'cerebellum',\n          radiotherapy: '0',\n          sx_main: 'deficit',\n        }}\n        validate={(values) => {\n          const errors = {};\n          if (!values.diagnosis_age) {\n            errors.diagnosis_age = 'Required';\n          } else if (!/^[0-9]+$/i.test(values.diagnosis_age)) {\n            errors.diagnosis_age = 'Age not a number';\n          }\n          if (!values.sx_duration) {\n            errors.sx_duration = 'Required';\n          } else if (!/^[0-9]+$/i.test(values.sx_duration)) {\n            errors.sx_duration = 'Age not a number';\n          }\n          return errors;\n        }}\n        onSubmit={(values, { setSubmitting }) => {\n          const tmp = { ...values };\n          setInt('diagnosis_age', tmp);\n          setInt('sx_duration', tmp);\n          setInt('chemo', tmp);\n          setInt('idh_status', tmp);\n\n          setDummy('sex', tmp);\n          setDummy('treatment', tmp);\n          setDummy('tumor_location', tmp);\n          setDummy('tumor_side', tmp);\n          setDummy('radiotherapy', tmp);\n          setDummy('sx_main', tmp);\n\n          axios\n            .post('/predict', tmp)\n            .then(({ data }) => {\n              setResponse(data);\n            })\n            .catch((err) => alert(JSON.stringify(err)))\n            .finally(() => {\n              setSubmitting(false);\n              setSubmitted(true);\n            });\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <Grid container columns={2} stackable>\n              <Grid.Column>\n                <Segment>\n                  <Button.Group style={style.filled}>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"sex\"\n                      value=\"male\"\n                      active={values.sex === 'male'}\n                    >\n                      Male\n                    </Button>\n                    <Button.Or />\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"sex\"\n                      value=\"female\"\n                      active={values.sex === 'female'}\n                    >\n                      Female\n                    </Button>\n                  </Button.Group>\n                </Segment>\n              </Grid.Column>\n              <Grid.Column>\n                <Segment>\n                  <Input\n                    style={style.filled}\n                    name=\"diagnosis_age\"\n                    value={values.diagnosis_age}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    error={errors.diagnosis_age && touched.diagnosis_age}\n                    label={{ basic: true, content: 'years old' }}\n                    labelPosition=\"right\"\n                    placeholder=\"Enter age at diagnosis...\"\n                  />\n                  <br />\n                  {errors.diagnosis_age &&\n                    touched.diagnosis_age &&\n                    errors.diagnosis_age}\n                </Segment>\n              </Grid.Column>\n              <Grid.Column>\n                <Segment>\n                  <Header\n                    as=\"h3\"\n                    content=\"Main symptom on presentation\"\n                    textAlign=\"center\"\n                  />\n                  <Button.Group style={style.filled}>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"sx_main\"\n                      value=\"deficit\"\n                      active={values.sx_main === 'deficit'}\n                    >\n                      Neurological deficit\n                    </Button>\n                    <Button.Or />\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"sx_main\"\n                      value=\"headache\"\n                      active={values.sx_main === 'headache'}\n                    >\n                      Headache\n                    </Button>\n                    <Button.Or />\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"sx_main\"\n                      value=\"seizure\"\n                      active={values.sx_main === 'seizure'}\n                    >\n                      Seizure\n                    </Button>\n                  </Button.Group>\n                </Segment>\n              </Grid.Column>\n              <Grid.Column>\n                <Segment>\n                  <Input\n                    style={style.filled}\n                    name=\"sx_duration\"\n                    value={values.sx_duration}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    error={errors.sx_duration && touched.sx_duration}\n                    label={{ basic: true, content: 'days' }}\n                    labelPosition=\"right\"\n                    placeholder=\"Symptom duration prior to diagnosis\"\n                  />\n                  <br />\n                  {errors.sx_duration &&\n                    touched.sx_duration &&\n                    errors.sx_duration}\n                </Segment>\n              </Grid.Column>\n              <Grid.Column>\n                <Segment>\n                  <Header\n                    as=\"h3\"\n                    content=\"Surgical management\"\n                    textAlign=\"center\"\n                  />\n                  <Button.Group vertical style={style.filled}>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"treatment\"\n                      value=\"biopsy\"\n                      active={values.treatment === 'biopsy'}\n                    >\n                      Biopsy\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"treatment\"\n                      value=\"debulking\"\n                      active={values.treatment === 'debulking'}\n                    >\n                      Debulking\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"treatment\"\n                      value=\"gross_total_resection\"\n                      active={values.treatment === 'gross_total_resection'}\n                    >\n                      Gross Total Resection\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"treatment\"\n                      value=\"subtotal_resection\"\n                      active={values.treatment === 'subtotal_resection'}\n                    >\n                      Subtotal Resection\n                    </Button>\n                  </Button.Group>\n                </Segment>\n              </Grid.Column>\n              <Grid.Column>\n                <Segment>\n                  <Header as=\"h3\" content=\"Tumor location\" textAlign=\"center\" />\n                  <Button.Group vertical style={style.filled}>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_location\"\n                      value=\"cerebellum\"\n                      active={values.tumor_location === 'cerebellum'}\n                    >\n                      Cerebellum\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_location\"\n                      value=\"corpus_callosum\"\n                      active={values.tumor_location === 'corpus_callosum'}\n                    >\n                      Corpus Callosum\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_location\"\n                      value=\"exterenal_capsule\"\n                      active={values.tumor_location === 'exterenal_capsule'}\n                    >\n                      External Capsule\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_location\"\n                      value=\"frontal_lobe\"\n                      active={values.tumor_location === 'frontal_lobe'}\n                    >\n                      Frontal Lobe\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_location\"\n                      value=\"parietal_lobe\"\n                      active={values.tumor_location === 'parietal_lobe'}\n                    >\n                      Parietal Lobe\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_location\"\n                      value=\"temporal_lobe\"\n                      active={values.tumor_location === 'temporal_lobe'}\n                    >\n                      Temporal Lobe\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_location\"\n                      value=\"occipital_lobe\"\n                      active={values.tumor_location === 'occipital_lobe'}\n                    >\n                      Occipital Lobe\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_location\"\n                      value=\"thalamus\"\n                      active={values.tumor_location === 'thalamus'}\n                    >\n                      Thalamus\n                    </Button>\n                  </Button.Group>\n                </Segment>\n              </Grid.Column>\n              <Grid.Column>\n                <Segment>\n                  <Header\n                    as=\"h3\"\n                    content=\"Tumor hemisphere\"\n                    textAlign=\"center\"\n                  />\n                  <Button.Group style={style.filled}>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_side\"\n                      value=\"left\"\n                      active={values.tumor_side === 'left'}\n                    >\n                      Left\n                    </Button>\n                    <Button.Or />\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_side\"\n                      value=\"right\"\n                      active={values.tumor_side === 'right'}\n                    >\n                      Right\n                    </Button>\n                    <Button.Or />\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"tumor_side\"\n                      value=\"both\"\n                      active={values.tumor_side === 'both'}\n                    >\n                      Both\n                    </Button>\n                  </Button.Group>\n                </Segment>\n              </Grid.Column>\n              <Grid.Column>\n                <Segment>\n                  <Header\n                    as=\"h3\"\n                    content=\"Radiotherapy treatment\"\n                    textAlign=\"center\"\n                  />\n                  <Button.Group style={style.filled}>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"radiotherapy\"\n                      value=\"0\"\n                      active={values.radiotherapy === '0'}\n                    >\n                      None given\n                    </Button>\n                    <Button.Or />\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"radiotherapy\"\n                      value=\"30\"\n                      active={values.radiotherapy === '30'}\n                    >\n                      30gy\n                    </Button>\n                    <Button.Or />\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"radiotherapy\"\n                      value=\"40\"\n                      active={values.radiotherapy === '40'}\n                    >\n                      40gy\n                    </Button>\n                    <Button.Or />\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"radiotherapy\"\n                      value=\"60\"\n                      active={values.radiotherapy === '60'}\n                    >\n                      60gy\n                    </Button>\n                  </Button.Group>\n                </Segment>\n              </Grid.Column>\n              <Grid.Column>\n                <Segment>\n                  <Header as=\"h3\" content=\"IDH status\" textAlign=\"center\" />\n                  <Button.Group style={style.filled}>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"idh_status\"\n                      value=\"0\"\n                      active={values.idh_status === '0'}\n                    >\n                      Negative\n                    </Button>\n                    <Button.Or />\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"idh_status\"\n                      value=\"1\"\n                      active={values.idh_status === '1'}\n                    >\n                      Positive\n                    </Button>\n                  </Button.Group>\n                </Segment>\n              </Grid.Column>\n              <Grid.Column>\n                <Segment>\n                  <Header\n                    as=\"h3\"\n                    content=\"TMZ Chemotherapy\"\n                    textAlign=\"center\"\n                  />\n                  <Button.Group style={style.filled}>\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"chemo\"\n                      value=\"0\"\n                      active={values.chemo === '0'}\n                    >\n                      Not given\n                    </Button>\n                    <Button.Or />\n                    <Button\n                      type=\"button\"\n                      onClick={handleChange}\n                      name=\"chemo\"\n                      value=\"1\"\n                      active={values.chemo === '1'}\n                    >\n                      Given\n                    </Button>\n                  </Button.Group>\n                </Segment>\n              </Grid.Column>\n            </Grid>\n            <Segment>\n              <Button\n                fluid\n                primary\n                disabled={Object.keys(errors).length > 0}\n                loading={isSubmitting}\n                type=\"submit\"\n              >\n                Submit\n              </Button>\n            </Segment>\n            <br />\n            {/* <pre>{JSON.stringify(values, null, 2)}</pre> */}\n          </form>\n        )}\n      </Formik>\n      {submitted && (\n        <PredictionResponse\n          message={response.message}\n          positive={response.positive}\n        />\n      )}\n      <br />\n      <br />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}